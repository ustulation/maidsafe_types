var searchIndex = {};
searchIndex['maidsafe_types'] = {"items":[[0,"","maidsafe_types","Placeholder DO NOT USE ! until version 0.1 - all code is a test and useless\nTypes of data functors and messages for MaidSafe secure Autonomous networks.\nThis crate is of no use to anyone as a stand alone crate. It is a module that is \nspecialised, but it is a crate to make version handling and distribution easier. ",null,null],[5,"always_true","","Placeholder doc test",null,{"inputs":[],"output":{"name":"bool"}}]],"paths":[]};
searchIndex['cbor'] = {"items":[[0,"","cbor","This crate provides an implementation of [RFC\n7049](https://tools.ietf.org/html/rfc7049), which specifies Concise Binary\nObject Representation (CBOR). CBOR adopts and modestly builds on the *data\nmodel* used by JSON, except the encoding is in binary form. Its primary goals\ninclude a balance of implementation size, message size and extensibility.",null,null],[3,"Decoder","","Read CBOR data items into Rust values from the underlying reader `R`.",null,null],[3,"Encoder","","Encodes Rust values to CBOR bytes in the underlying writer `W`.",null,null],[3,"DirectDecoder","","Experimental and incomplete direct decoder.",null,null],[3,"CborBytes","","A byte string (major type 2).",null,null],[3,"CborTag","","A tag (major type 6).",null,null],[12,"tag","","The tag number.",0,null],[12,"data","","The data item, represented in terms of CBOR abstract syntax.",0,null],[3,"CborTagEncode","","A special type that can be used to encode CBOR tags.",null,null],[12,"tag","","The tag number.",1,null],[12,"data","","The actual data item to encode.",1,null],[4,"Type","","All core types defined in the CBOR specification.",null,null],[13,"UInt","","",2,null],[13,"UInt8","","",2,null],[13,"UInt16","","",2,null],[13,"UInt32","","",2,null],[13,"UInt64","","",2,null],[13,"Int","","",2,null],[13,"Int8","","",2,null],[13,"Int16","","",2,null],[13,"Int32","","",2,null],[13,"Int64","","",2,null],[13,"Float","","",2,null],[13,"Float16","","",2,null],[13,"Float32","","",2,null],[13,"Float64","","",2,null],[13,"Bytes","","",2,null],[13,"Unicode","","",2,null],[13,"Array","","",2,null],[13,"Map","","",2,null],[13,"Tag","","",2,null],[13,"Any","","",2,null],[13,"Null","","",2,null],[13,"Undefined","","",2,null],[13,"Bool","","",2,null],[13,"Break","","",2,null],[4,"Cbor","","CBOR abstract syntax.",null,null],[13,"Break","","A code used to signify the end of an indefinite length data item.",3,null],[13,"Undefined","","An undefined data item (major type 7, value 23).",3,null],[13,"Null","","A null data item (major type 7, value 22).",3,null],[13,"Bool","","A boolean data item (major type 7, values 20 or 21).",3,null],[13,"Unsigned","","An unsigned integer (major type 0).",3,null],[13,"Signed","","A negative integer (major type 1).",3,null],[13,"Float","","An IEEE 754 floating point number (major type 7).",3,null],[13,"Bytes","","A byte string (major type 2).",3,null],[13,"Unicode","","A Unicode string (major type 3).",3,null],[13,"Array","","An array (major type 4).",3,null],[13,"Map","","A map (major type 5).",3,null],[13,"Tag","","A tag (major type 6).",3,null],[4,"CborUnsigned","","An unsigned integer (major type 0).",null,null],[13,"UInt8","","Unsigned 8 bit integer.",4,null],[13,"UInt16","","Unsigned 16 bit integer.",4,null],[13,"UInt32","","Unsigned 32 bit integer.",4,null],[13,"UInt64","","Unsigned 64 bit integer.",4,null],[4,"CborSigned","","A negative integer (major type 1).",null,null],[13,"Int8","","Negative 8 bit integer.",5,null],[13,"Int16","","Negative 16 bit integer.",5,null],[13,"Int32","","Negative 32 bit integer.",5,null],[13,"Int64","","Negative 64 bit integer.",5,null],[4,"CborFloat","","An IEEE 754 floating point number (major type 7).",null,null],[13,"Float16","","IEEE 754 half-precision float.",6,null],[13,"Float32","","IEEE 754 single-precision float.",6,null],[13,"Float64","","IEEE 754 double-precision float.",6,null],[4,"CborError","","Errors that can be produced by a CBOR operation.",null,null],[13,"Io","","An error as a result of an  underlying IO operation.",7,null],[13,"Decode","","An error from the type based decoder.",7,null],[13,"Encode","","An error from the type based encoder.",7,null],[13,"AtOffset","","An error reading CBOR at a particular offset.",7,null],[12,"kind","cbor::CborError","The exact read error.",7,null],[12,"offset","","The byte offset at which the error occurred.",7,null],[13,"UnexpectedEOF","cbor","EOF is found but more bytes were expected to decode the next data item.",7,null],[4,"ReadError","","An error produced by reading CBOR data.",null,null],[13,"TypeMismatch","","An error for when the expected type does not match the received type.",8,null],[12,"expected","cbor::ReadError","Expected CBOR type.",8,null],[12,"got","","Received CBOR type.",8,null],[13,"InvalidAddValue","cbor","When the additional information is inconsistent with the major type.",8,null],[12,"ty","cbor::ReadError","CBOR type.",8,null],[12,"val","","Additional information value.",8,null],[13,"Unassigned","cbor","The value found is unassigned.",8,null],[12,"major","cbor::ReadError","CBOR major type value.",8,null],[12,"add","","Additional information value.",8,null],[13,"Reserved","cbor","The value found is reserved.",8,null],[12,"major","cbor::ReadError","CBOR major type value.",8,null],[12,"add","","Additional information value.",8,null],[13,"Other","cbor","Some other error occurred.",8,null],[4,"WriteError","","An error produced by writing CBOR data.",null,null],[13,"InvalidMapKey","","Occurs when writing a map key that isn't a Unicode string.",9,null],[12,"got","cbor::WriteError","The received type (if that information is available).",9,null],[11,"from_reader","cbor","Create a new CBOR decoder from the underlying reader.",10,{"inputs":[{"name":"decoder"},{"name":"r"}],"output":{"name":"decoder"}}],[11,"decode","","Decode a sequence of top-level CBOR data items into Rust values.",10,{"inputs":[{"name":"decoder"}],"output":{"name":"decodeditems"}}],[11,"items","","Read a sequence of top-level CBOR data items.",10,{"inputs":[{"name":"decoder"}],"output":{"name":"items"}}],[11,"from_bytes","","Create a new CBOR decoder that reads from the buffer given.",10,{"inputs":[{"name":"decoder"},{"name":"t"}],"output":{"name":"decoder"}}],[11,"from_writer","","Encode CBOR to an arbitrary writer.",11,{"inputs":[{"name":"encoder"},{"name":"w"}],"output":{"name":"encoder"}}],[11,"encode","","Encode an iterator of Rust values to CBOR in the underlying writer.",11,{"inputs":[{"name":"encoder"},{"name":"i"}],"output":{"name":"cborresult"}}],[11,"flush","","Flush the underlying writer.",11,{"inputs":[{"name":"encoder"}],"output":{"name":"cborresult"}}],[11,"from_memory","","Encode CBOR to an in memory buffer.",11,{"inputs":[{"name":"encoder"}],"output":{"name":"encoder"}}],[11,"as_bytes","","Flush and retrieve the CBOR bytes that have been written.",11,null],[11,"emit_nil","","",11,{"inputs":[{"name":"encoder"}],"output":{"name":"cborresult"}}],[11,"emit_usize","","",11,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"cborresult"}}],[11,"emit_u64","","",11,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"cborresult"}}],[11,"emit_u32","","",11,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"cborresult"}}],[11,"emit_u16","","",11,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"cborresult"}}],[11,"emit_u8","","",11,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"cborresult"}}],[11,"emit_isize","","",11,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"cborresult"}}],[11,"emit_i64","","",11,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"cborresult"}}],[11,"emit_i32","","",11,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"cborresult"}}],[11,"emit_i16","","",11,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"cborresult"}}],[11,"emit_i8","","",11,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"cborresult"}}],[11,"emit_f64","","",11,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"cborresult"}}],[11,"emit_f32","","",11,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"cborresult"}}],[11,"emit_bool","","",11,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"cborresult"}}],[11,"emit_char","","",11,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"cborresult"}}],[11,"emit_str","","",11,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"cborresult"}}],[11,"emit_enum","","",11,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_enum_variant","","",11,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_enum_variant_arg","","",11,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_enum_struct_variant","","",11,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_enum_struct_variant_field","","",11,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_struct","","",11,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_struct_field","","",11,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_tuple","","",11,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_tuple_arg","","",11,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_tuple_struct","","",11,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_tuple_struct_arg","","",11,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_option","","",11,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_option_none","","",11,{"inputs":[{"name":"encoder"}],"output":{"name":"cborresult"}}],[11,"emit_option_some","","",11,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_seq","","",11,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_seq_elt","","",11,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_map","","",11,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_map_elt_key","","",11,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"emit_map_elt_val","","",11,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"to_json","","",3,{"inputs":[{"name":"cbor"}],"output":{"name":"json"}}],[11,"to_cbor","rustc-serialize::json","",12,{"inputs":[{"name":"json"}],"output":{"name":"cbor"}}],[11,"from_bytes","cbor","Create a new CBOR decoder that reads from the buffer given.",13,{"inputs":[{"name":"directdecoder"},{"name":"t"}],"output":{"name":"cbordecoder"}}],[11,"from_reader","","Create a new CBOR decoder that reads from the reader given.",13,{"inputs":[{"name":"directdecoder"},{"name":"r"}],"output":{"name":"cbordecoder"}}],[11,"error","","",13,{"inputs":[{"name":"directdecoder"},{"name":"str"}],"output":{"name":"cborerror"}}],[11,"read_nil","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_usize","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_u64","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_u32","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_u16","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_u8","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_isize","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_i64","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_i32","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_i16","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_i8","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_bool","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_f64","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_f32","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_char","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_str","","",13,{"inputs":[{"name":"directdecoder"}],"output":{"name":"cborresult"}}],[11,"read_enum","","",13,{"inputs":[{"name":"directdecoder"},{"name":"str"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_enum_variant","","",13,null],[11,"read_enum_variant_arg","","",13,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_enum_struct_variant","","",13,null],[11,"read_enum_struct_variant_field","","",13,{"inputs":[{"name":"directdecoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_struct","","",13,{"inputs":[{"name":"directdecoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_struct_field","","",13,{"inputs":[{"name":"directdecoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_tuple","","",13,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_tuple_arg","","",13,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_tuple_struct","","",13,{"inputs":[{"name":"directdecoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_tuple_struct_arg","","",13,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_option","","",13,{"inputs":[{"name":"directdecoder"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_seq","","",13,{"inputs":[{"name":"directdecoder"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_seq_elt","","",13,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_map","","",13,{"inputs":[{"name":"directdecoder"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_map_elt_key","","",13,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[11,"read_map_elt_val","","",13,{"inputs":[{"name":"directdecoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"cborresult"}}],[6,"CborResult","","Type synonym for `Result<T, CborError>`.",null,null],[8,"ToCbor","","A trait for converting values to CBOR.",null,null],[10,"to_cbor","","Return a CBOR representation of `self`.",14,{"inputs":[{"name":"tocbor"}],"output":{"name":"cbor"}}],[11,"eq","","",2,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"fmt","","",2,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"cbor"},{"name":"cbor"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"cbor"},{"name":"cbor"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"cbor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"cbor"}],"output":{"name":"cbor"}}],[11,"decode","","",4,{"inputs":[{"name":"cborunsigned"},{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"cborunsigned"},{"name":"cborunsigned"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"cborunsigned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"cborunsigned"}],"output":{"name":"cborunsigned"}}],[11,"decode","","",5,{"inputs":[{"name":"cborsigned"},{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"cborsigned"},{"name":"cborsigned"}],"output":{"name":"ordering"}}],[11,"fmt","","",5,{"inputs":[{"name":"cborsigned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"cborsigned"}],"output":{"name":"cborsigned"}}],[11,"decode","","",6,{"inputs":[{"name":"cborfloat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"cborfloat"},{"name":"cborfloat"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"cborfloat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"cborfloat"}],"output":{"name":"cborfloat"}}],[11,"encode","","",15,{"inputs":[{"name":"cborbytes"},{"name":"__s"}],"output":{"name":"result"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"cborbytes"},{"name":"cborbytes"}],"output":{"name":"ordering"}}],[11,"fmt","","",15,{"inputs":[{"name":"cborbytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"cborbytes"}],"output":{"name":"cborbytes"}}],[11,"encode","","",0,{"inputs":[{"name":"cbortag"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"cbortag"},{"name":"cbortag"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"cbortag"},{"name":"cbortag"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"cbortag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"cbortag"}],"output":{"name":"cbortag"}}],[11,"encode","","",1,{"inputs":[{"name":"cbortagencode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"cbortagencode"},{"name":"cbortagencode"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"cbortagencode"},{"name":"cbortagencode"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"cbortagencode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"cbortagencode"}],"output":{"name":"cbortagencode"}}],[11,"encode","","",3,{"inputs":[{"name":"cbor"},{"name":"e"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"cborunsigned"},{"name":"e"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"cborsigned"},{"name":"e"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"cborfloat"},{"name":"e"}],"output":{"name":"result"}}],[6,"Target","","",null,null],[11,"deref","","",15,null],[11,"deref_mut","","",15,null],[11,"decode","","",15,{"inputs":[{"name":"cborbytes"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"cborerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"cborerror"}],"output":{"name":"cborerror"}}],[11,"fmt","","",8,{"inputs":[{"name":"readerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"readerror"}],"output":{"name":"readerror"}}],[11,"fmt","","",9,{"inputs":[{"name":"writeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"writeerror"}],"output":{"name":"writeerror"}}],[11,"from_error","","",7,{"inputs":[{"name":"cborerror"},{"name":"error"}],"output":{"name":"cborerror"}}],[11,"from_error","","",7,{"inputs":[{"name":"cborerror"},{"name":"error"}],"output":{"name":"cborerror"}}],[11,"fmt","","",7,{"inputs":[{"name":"cborerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"readerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"writeerror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"CborTag"],[3,"CborTagEncode"],[4,"Type"],[4,"Cbor"],[4,"CborUnsigned"],[4,"CborSigned"],[4,"CborFloat"],[4,"CborError"],[4,"ReadError"],[4,"WriteError"],[3,"Decoder"],[3,"Encoder"],[4,"Json"],[3,"DirectDecoder"],[8,"ToCbor"],[3,"CborBytes"]]};
searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",3,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",4,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",5,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",6,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",8,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",10,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",11,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",12,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",13,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",14,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc-serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",17,null],[12,"newline","","Newline to use",17,null],[12,"pad","","True to pad output with `=` characters",17,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",18,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",19,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20,null],[13,"InvalidBase64Length","","The input had an invalid length",20,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc-serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",23,null],[13,"InvalidHexLength","","The input had an invalid length",23,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc-serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc-serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",26,null],[13,"U64","","",26,null],[13,"F64","","",26,null],[13,"String","","",26,null],[13,"Boolean","","",26,null],[13,"Array","","",26,null],[13,"Object","","",26,null],[13,"Null","","",26,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",27,null],[13,"InvalidNumber","","",27,null],[13,"EOFWhileParsingObject","","",27,null],[13,"EOFWhileParsingArray","","",27,null],[13,"EOFWhileParsingValue","","",27,null],[13,"EOFWhileParsingString","","",27,null],[13,"KeyMustBeAString","","",27,null],[13,"ExpectedColon","","",27,null],[13,"TrailingCharacters","","",27,null],[13,"TrailingComma","","",27,null],[13,"InvalidEscape","","",27,null],[13,"InvalidUnicodeCodePoint","","",27,null],[13,"LoneLeadingSurrogateInHexEscape","","",27,null],[13,"UnexpectedEndOfHexEscape","","",27,null],[13,"UnrecognizedHex","","",27,null],[13,"NotFourDigit","","",27,null],[13,"NotUtf8","","",27,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",28,null],[13,"IoError","","",28,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",29,null],[13,"ExpectedError","","",29,null],[13,"MissingFieldError","","",29,null],[13,"UnknownVariantError","","",29,null],[13,"ApplicationError","","",29,null],[13,"EOF","","",29,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",30,null],[13,"BadHashmapKey","","",30,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",31,null],[13,"ObjectEnd","","",31,null],[13,"ArrayStart","","",31,null],[13,"ArrayEnd","","",31,null],[13,"BooleanValue","","",31,null],[13,"I64Value","","",31,null],[13,"U64Value","","",31,null],[13,"F64Value","","",31,null],[13,"StringValue","","",31,null],[13,"NullValue","","",31,null],[13,"Error","","",31,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",32,null],[13,"Key","","",32,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",33,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"parsererror"}],"output":{"name":"parsererror"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"decodererror"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",28,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_error","","",30,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[6,"Error","","",null,null],[11,"emit_nil","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",34,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",34,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",34,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",34,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",34,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",34,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",34,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",34,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",34,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",34,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",34,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",34,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",34,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",26,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",26,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",26,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[6,"Output","","",null,null],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[6,"Output","","",null,null],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",31,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"jsonevent"}],"output":{"name":"jsonevent"}}],[11,"eq","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",35,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",35,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",35,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",35,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"top","","Returns the top-most element (if any).",35,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",36,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",36,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",37,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",37,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",38,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[6,"Error","","",null,null],[11,"read_nil","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",38,null],[11,"read_enum_variant_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",38,null],[11,"read_enum_struct_variant_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",38,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",3,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",13,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",4,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc-serialize::json","Encodes a json value into a string",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",39,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",41,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Err","","",null,null],[11,"from_str","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",3,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",4,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",5,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",6,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",8,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",10,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[8,"Decoder","rustc-serialize","",null,null],[16,"Error","rustc-serialize::Decoder","",null,null],[10,"read_nil","rustc-serialize","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",42,null],[10,"read_enum_variant_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",42,null],[10,"read_enum_struct_variant_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",42,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","rustc-serialize::Encoder","",null,null],[10,"emit_nil","rustc-serialize","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",43,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",43,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",43,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",43,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",43,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",43,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",43,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",43,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",43,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",43,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",43,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",43,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",43,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",43,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",44,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",45,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",46,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",47,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['sodiumoxide'] = {"items":[[0,"","sodiumoxide","Rust bindings to the [sodium library](https://github.com/jedisct1/libsodium).",null,null],[5,"init","","`init()` initializes the sodium library and chooses faster versions of\nthe primitives if possible. `init()` also makes the random number generation\nfunctions (`gen_key`, `gen_keypair`, `gen_nonce`, `randombytes`, `randombytes_into`)\nthread-safe",null,{"inputs":[],"output":{"name":"bool"}}],[0,"randombytes","","Cryptographic random number generation",null,null],[5,"randombytes","sodiumoxide::randombytes","`randombytes()` randomly generates size bytes of data.",null,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[5,"randombytes_into","","`randombytes_into()` fills a buffer `buf` with random data.",null,null],[0,"crypto","sodiumoxide","Cryptographic functions",null,null],[0,"asymmetricbox","sodiumoxide::crypto","Public-key authenticated encryption",null,null],[0,"curve25519xsalsa20poly1305","sodiumoxide::crypto::asymmetricbox","`crypto_box_curve25519xsalsa20poly1305` , a particular\ncombination of Curve25519, Salsa20, and Poly1305 specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html).",null,null],[3,"PublicKey","sodiumoxide::crypto::asymmetricbox::curve25519xsalsa20poly1305","`PublicKey` for asymmetric authenticated encryption",null,null],[3,"SecretKey","","`SecretKey` for asymmetric authenticated encryption",null,null],[3,"Nonce","","`Nonce` for asymmetric authenticated encryption",null,null],[3,"PrecomputedKey","","Applications that send several messages to the same receiver can gain speed by\nsplitting `seal()` into two steps, `precompute()` and `seal_precomputed()`.\nSimilarly, applications that receive several messages from the same sender can gain\nspeed by splitting `open()` into two steps, `precompute()` and `open_precomputed()`.",null,null],[5,"gen_keypair","","`gen_keypair()` randomly generates a secret key and a corresponding public key.",null,null],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"seal","","`seal()` encrypts and authenticates a message `m` using the senders secret key `sk`,\nthe receivers public key `pk` and a nonce `n`. It returns a ciphertext `c`.",null,null],[5,"open","","`open()` verifies and decrypts a ciphertext `c` using the receiver's secret key `sk`,\nthe senders public key `pk`, and a nonce `n`. It returns a plaintext `Some(m)`.\nIf the ciphertext fails verification, `open()` returns `None`.",null,null],[5,"precompute","","`precompute()` computes an intermediate key that can be used by `seal_precomputed()`\nand `open_precomputed()`",null,{"inputs":[{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"precomputedkey"}}],[5,"seal_precomputed","","`seal_precomputed()` encrypts and authenticates a message `m` using a precomputed key `k`,\nand a nonce `n`. It returns a ciphertext `c`.",null,null],[5,"open_precomputed","","`open_precomputed()` verifies and decrypts a ciphertext `c` using a precomputed\nkey `k` and a nonce `n`. It returns a plaintext `Some(m)`.\nIf the ciphertext fails verification, `open_precomputed()` returns `None`.",null,null],[17,"PUBLICKEYBYTES","","",null,null],[17,"SECRETKEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[17,"PRECOMPUTEDKEYBYTES","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",0,null],[6,"Output","","",null,null],[11,"index","","",0,null],[6,"Output","","",null,null],[11,"index","","",0,null],[6,"Output","","",null,null],[11,"index","","",0,null],[6,"Output","","",null,null],[11,"index","","",0,null],[11,"drop","","",1,{"inputs":[{"name":"secretkey"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"secretkey"}],"output":{"name":"secretkey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",1,null],[6,"Output","","",null,null],[11,"index","","",1,null],[6,"Output","","",null,null],[11,"index","","",1,null],[6,"Output","","",null,null],[11,"index","","",1,null],[6,"Output","","",null,null],[11,"index","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",2,null],[6,"Output","","",null,null],[11,"index","","",2,null],[6,"Output","","",null,null],[11,"index","","",2,null],[6,"Output","","",null,null],[11,"index","","",2,null],[6,"Output","","",null,null],[11,"index","","",2,null],[11,"drop","","",3,{"inputs":[{"name":"precomputedkey"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"precomputedkey"}],"output":{"name":"precomputedkey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",3,null],[6,"Output","","",null,null],[11,"index","","",3,null],[6,"Output","","",null,null],[11,"index","","",3,null],[6,"Output","","",null,null],[11,"index","","",3,null],[6,"Output","","",null,null],[11,"index","","",3,null],[0,"sign","sodiumoxide::crypto","Public-key signatures",null,null],[0,"ed25519","sodiumoxide::crypto::sign","`ed25519`, a signature scheme specified in\n[Ed25519](http://ed25519.cr.yp.to/). This function is conjectured to meet the\nstandard notion of unforgeability for a public-key signature scheme under\nchosen-message attacks.",null,null],[3,"Seed","sodiumoxide::crypto::sign::ed25519","`Seed` that can be used for keypair generation",null,null],[3,"SecretKey","","`SecretKey` for signatures",null,null],[3,"PublicKey","","`PublicKey` for signatures",null,null],[3,"Signature","","Detached signature",null,null],[5,"gen_keypair","","`gen_keypair()` randomly generates a secret key and a corresponding public\nkey.",null,null],[5,"keypair_from_seed","","`keypair_from_seed()` computes a secret key and a corresponding public key\nfrom a `Seed`.",null,null],[5,"sign","","`sign()` signs a message `m` using the signer's secret key `sk`.\n`sign()` returns the resulting signed message `sm`.",null,null],[5,"verify","","`verify()` verifies the signature in `sm` using the signer's public key `pk`.\n`verify()` returns the message `Some(m)`.\nIf the signature fails verification, `verify()` returns `None`.",null,null],[5,"sign_detached","","`sign_detached()` signs a message `m` using the signer's secret key `sk`.\n`sign_detached()` returns the resulting signature `sig`.",null,null],[5,"verify_detached","","`verify_detached()` verifies the signature in `sig` against the message `m`\nand the signer's public key `pk`.\n`verify_detached()` returns true if the signature is valid, false otherwise.",null,null],[17,"SEEDBYTES","","",null,null],[17,"SECRETKEYBYTES","","",null,null],[17,"PUBLICKEYBYTES","","",null,null],[17,"SIGNATUREBYTES","","",null,null],[11,"drop","","",4,{"inputs":[{"name":"seed"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"seed"}],"output":{"name":"seed"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",4,null],[6,"Output","","",null,null],[11,"index","","",4,null],[6,"Output","","",null,null],[11,"index","","",4,null],[6,"Output","","",null,null],[11,"index","","",4,null],[6,"Output","","",null,null],[11,"index","","",4,null],[11,"drop","","",5,{"inputs":[{"name":"secretkey"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"secretkey"}],"output":{"name":"secretkey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",5,null],[6,"Output","","",null,null],[11,"index","","",5,null],[6,"Output","","",null,null],[11,"index","","",5,null],[6,"Output","","",null,null],[11,"index","","",5,null],[6,"Output","","",null,null],[11,"index","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",6,null],[6,"Output","","",null,null],[11,"index","","",6,null],[6,"Output","","",null,null],[11,"index","","",6,null],[6,"Output","","",null,null],[11,"index","","",6,null],[6,"Output","","",null,null],[11,"index","","",6,null],[11,"clone","","",7,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",7,null],[6,"Output","","",null,null],[11,"index","","",7,null],[6,"Output","","",null,null],[11,"index","","",7,null],[6,"Output","","",null,null],[11,"index","","",7,null],[6,"Output","","",null,null],[11,"index","","",7,null],[0,"edwards25519sha512batch","sodiumoxide::crypto::sign","WARNING: This signature software is a prototype. It has been replaced by the final system\n[Ed25519](http://ed25519.cr.yp.to/). It is only kept here for compatibility reasons.",null,null],[3,"SecretKey","sodiumoxide::crypto::sign::edwards25519sha512batch","`SecretKey` for signatures",null,null],[3,"PublicKey","","`PublicKey` for signatures",null,null],[5,"gen_keypair","","`gen_keypair()` randomly generates a secret key and a corresponding public\nkey.",null,null],[5,"sign","","`sign()` signs a message `m` using the signer's secret key `sk`.\n`sign()` returns the resulting signed message `sm`.",null,null],[5,"verify","","`verify()` verifies the signature in `sm` using the signer's public key `pk`.\n`verify()` returns the message `Some(m)`.\nIf the signature fails verification, `verify()` returns `None`.",null,null],[17,"SECRETKEYBYTES","","",null,null],[17,"PUBLICKEYBYTES","","",null,null],[17,"SIGNATUREBYTES","","",null,null],[11,"drop","","",8,{"inputs":[{"name":"secretkey"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"secretkey"}],"output":{"name":"secretkey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",8,null],[6,"Output","","",null,null],[11,"index","","",8,null],[6,"Output","","",null,null],[11,"index","","",8,null],[6,"Output","","",null,null],[11,"index","","",8,null],[6,"Output","","",null,null],[11,"index","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",9,null],[6,"Output","","",null,null],[11,"index","","",9,null],[6,"Output","","",null,null],[11,"index","","",9,null],[6,"Output","","",null,null],[11,"index","","",9,null],[6,"Output","","",null,null],[11,"index","","",9,null],[0,"scalarmult","sodiumoxide::crypto","Scalar multiplication",null,null],[0,"curve25519","sodiumoxide::crypto::scalarmult","`crypto_scalarmult_curve25519` specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Sections 2, 3, and 4.\nThis function is conjectured to be strong. For background see Bernstein,\n\"Curve25519: new Diffie-Hellman speed records,\" Lecture Notes in Computer\nScience 3958 (2006), 207–228, http://cr.yp.to/papers.html#curve25519.",null,null],[3,"Scalar","sodiumoxide::crypto::scalarmult::curve25519","`Scalar` value (integer in byte representation)",null,null],[3,"GroupElement","","`GroupElement`",null,null],[5,"scalarmult","","`scalarmult()` multiplies a group element `p`\nby an integer `n`. It returns the resulting group element\n`q`.",null,{"inputs":[{"name":"scalar"},{"name":"groupelement"}],"output":{"name":"groupelement"}}],[5,"scalarmult_base","","`scalarmult_base()` computes the scalar product of a standard\ngroup element and an integer `n`. It returns the resulting\ngroup element `q`/",null,{"inputs":[{"name":"scalar"}],"output":{"name":"groupelement"}}],[17,"BYTES","","",null,null],[17,"SCALARBYTES","","",null,null],[11,"clone","","",10,{"inputs":[{"name":"scalar"}],"output":{"name":"scalar"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",10,null],[6,"Output","","",null,null],[11,"index","","",10,null],[6,"Output","","",null,null],[11,"index","","",10,null],[6,"Output","","",null,null],[11,"index","","",10,null],[6,"Output","","",null,null],[11,"index","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"groupelement"}],"output":{"name":"groupelement"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",11,null],[6,"Output","","",null,null],[11,"index","","",11,null],[6,"Output","","",null,null],[11,"index","","",11,null],[6,"Output","","",null,null],[11,"index","","",11,null],[6,"Output","","",null,null],[11,"index","","",11,null],[0,"auth","sodiumoxide::crypto","Secret-key authentication",null,null],[0,"hmacsha512256","sodiumoxide::crypto::auth","`HMAC-SHA-512-256`, i.e., the first 256 bits of\n`HMAC-SHA-512`.  `HMAC-SHA-512-256` is conjectured to meet the standard notion\nof unforgeability.",null,null],[3,"Key","sodiumoxide::crypto::auth::hmacsha512256","Authentication `Key`",null,null],[3,"Tag","","Authentication `Tag`",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","",null,null],[17,"TAGBYTES","","",null,null],[11,"drop","","",12,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",12,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",12,null],[6,"Output","","",null,null],[11,"index","","",12,null],[6,"Output","","",null,null],[11,"index","","",12,null],[6,"Output","","",null,null],[11,"index","","",12,null],[6,"Output","","",null,null],[11,"index","","",12,null],[11,"eq","","",13,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",13,null],[6,"Output","","",null,null],[11,"index","","",13,null],[6,"Output","","",null,null],[11,"index","","",13,null],[6,"Output","","",null,null],[11,"index","","",13,null],[6,"Output","","",null,null],[11,"index","","",13,null],[0,"hmacsha256","sodiumoxide::crypto::auth","`HMAC-SHA-256` `HMAC-SHA-256` is conjectured to meet the standard notion of\nunforgeability.",null,null],[3,"Key","sodiumoxide::crypto::auth::hmacsha256","Authentication `Key`",null,null],[3,"Tag","","Authentication `Tag`",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","",null,null],[17,"TAGBYTES","","",null,null],[11,"drop","","",14,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",14,null],[6,"Output","","",null,null],[11,"index","","",14,null],[6,"Output","","",null,null],[11,"index","","",14,null],[6,"Output","","",null,null],[11,"index","","",14,null],[6,"Output","","",null,null],[11,"index","","",14,null],[11,"eq","","",15,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",15,null],[6,"Output","","",null,null],[11,"index","","",15,null],[6,"Output","","",null,null],[11,"index","","",15,null],[6,"Output","","",null,null],[11,"index","","",15,null],[6,"Output","","",null,null],[11,"index","","",15,null],[0,"hash","sodiumoxide::crypto","Hashing",null,null],[0,"sha512","sodiumoxide::crypto::hash","`SHA-512`.",null,null],[3,"Digest","sodiumoxide::crypto::hash::sha512","Digest-structure",null,null],[5,"hash","","`hash` hashes a message `m`. It returns a hash `h`.",null,null],[17,"HASHBYTES","","",null,null],[17,"BLOCKBYTES","","",null,null],[11,"clone","","",16,{"inputs":[{"name":"digest"}],"output":{"name":"digest"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",16,null],[6,"Output","","",null,null],[11,"index","","",16,null],[6,"Output","","",null,null],[11,"index","","",16,null],[6,"Output","","",null,null],[11,"index","","",16,null],[6,"Output","","",null,null],[11,"index","","",16,null],[0,"sha256","sodiumoxide::crypto::hash","`SHA-256`.",null,null],[3,"Digest","sodiumoxide::crypto::hash::sha256","Digest-structure",null,null],[5,"hash","","`hash` hashes a message `m`. It returns a hash `h`.",null,null],[17,"HASHBYTES","","",null,null],[17,"BLOCKBYTES","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"digest"}],"output":{"name":"digest"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",17,null],[6,"Output","","",null,null],[11,"index","","",17,null],[6,"Output","","",null,null],[11,"index","","",17,null],[6,"Output","","",null,null],[11,"index","","",17,null],[6,"Output","","",null,null],[11,"index","","",17,null],[0,"secretbox","sodiumoxide::crypto","Secret-key authenticated encryption",null,null],[0,"xsalsa20poly1305","sodiumoxide::crypto::secretbox","`crypto_secretbox_xsalsa20poly1305`, a particular\ncombination of Salsa20 and Poly1305 specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html).",null,null],[3,"Key","sodiumoxide::crypto::secretbox::xsalsa20poly1305","`Key` for symmetric authenticated encryption",null,null],[3,"Nonce","","`Nonce` for symmetric authenticated encryption",null,null],[5,"gen_key","","`gen_key()` randomly generates a secret key",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"seal","","`seal()` encrypts and authenticates a message `m` using a secret key `k` and a\nnonce `n`.  It returns a ciphertext `c`.",null,null],[5,"open","","`open()` verifies and decrypts a ciphertext `c` using a secret key `k` and a nonce `n`.\nIt returns a plaintext `Some(m)`.\nIf the ciphertext fails verification, `open()` returns `None`.",null,null],[17,"KEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[11,"drop","","",18,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",18,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",18,null],[6,"Output","","",null,null],[11,"index","","",18,null],[6,"Output","","",null,null],[11,"index","","",18,null],[6,"Output","","",null,null],[11,"index","","",18,null],[6,"Output","","",null,null],[11,"index","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",19,null],[6,"Output","","",null,null],[11,"index","","",19,null],[6,"Output","","",null,null],[11,"index","","",19,null],[6,"Output","","",null,null],[11,"index","","",19,null],[6,"Output","","",null,null],[11,"index","","",19,null],[0,"onetimeauth","sodiumoxide::crypto","Secret-key One-time authentication",null,null],[0,"poly1305","sodiumoxide::crypto::onetimeauth","`crypto_onetimeauth_poly1305`, an authenticator specified\nin [Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 9. This\nauthenticator is proven to meet the standard notion of unforgeability after a\nsingle message.",null,null],[3,"Key","sodiumoxide::crypto::onetimeauth::poly1305","Authentication `Key`",null,null],[3,"Tag","","Authentication `Tag`",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for authentication",null,{"inputs":[],"output":{"name":"key"}}],[5,"authenticate","","`authenticate()` authenticates a message `m` using a secret key `k`.\nThe function returns an authenticator tag.",null,null],[5,"verify","","`verify()` returns `true` if `tag` is a correct authenticator of message `m`\nunder a secret key `k`. Otherwise it returns false.",null,null],[17,"KEYBYTES","","",null,null],[17,"TAGBYTES","","",null,null],[11,"drop","","",20,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",20,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",20,null],[6,"Output","","",null,null],[11,"index","","",20,null],[6,"Output","","",null,null],[11,"index","","",20,null],[6,"Output","","",null,null],[11,"index","","",20,null],[6,"Output","","",null,null],[11,"index","","",20,null],[11,"eq","","",21,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",21,null],[6,"Output","","",null,null],[11,"index","","",21,null],[6,"Output","","",null,null],[11,"index","","",21,null],[6,"Output","","",null,null],[11,"index","","",21,null],[6,"Output","","",null,null],[11,"index","","",21,null],[0,"stream","sodiumoxide::crypto","Secret-key encryption",null,null],[0,"xsalsa20","sodiumoxide::crypto::stream","`crypto_stream_xsalsa20`, a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.\nThis cipher is conjectured to meet the standard notion of\nunpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::xsalsa20","`Key` for symmetric encryption",null,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[11,"drop","","",22,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",22,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",22,null],[6,"Output","","",null,null],[11,"index","","",22,null],[6,"Output","","",null,null],[11,"index","","",22,null],[6,"Output","","",null,null],[11,"index","","",22,null],[6,"Output","","",null,null],[11,"index","","",22,null],[11,"clone","","",23,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",23,null],[6,"Output","","",null,null],[11,"index","","",23,null],[6,"Output","","",null,null],[11,"index","","",23,null],[6,"Output","","",null,null],[11,"index","","",23,null],[6,"Output","","",null,null],[11,"index","","",23,null],[0,"aes128ctr","sodiumoxide::crypto::stream","`AES 128` in `CTR`-mode\nThis cipher is conjectured to meet the standard notion of\nunpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::aes128ctr","`Key` for symmetric encryption",null,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[11,"drop","","",24,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",24,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",24,null],[6,"Output","","",null,null],[11,"index","","",24,null],[6,"Output","","",null,null],[11,"index","","",24,null],[6,"Output","","",null,null],[11,"index","","",24,null],[6,"Output","","",null,null],[11,"index","","",24,null],[11,"clone","","",25,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",25,null],[6,"Output","","",null,null],[11,"index","","",25,null],[6,"Output","","",null,null],[11,"index","","",25,null],[6,"Output","","",null,null],[11,"index","","",25,null],[6,"Output","","",null,null],[11,"index","","",25,null],[0,"salsa208","sodiumoxide::crypto::stream","`crypto_stream_salsa208` (Salsa20/8), a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.  This\ncipher is conjectured to meet the standard notion of unpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::salsa208","`Key` for symmetric encryption",null,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[11,"drop","","",26,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",26,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",26,null],[6,"Output","","",null,null],[11,"index","","",26,null],[6,"Output","","",null,null],[11,"index","","",26,null],[6,"Output","","",null,null],[11,"index","","",26,null],[6,"Output","","",null,null],[11,"index","","",26,null],[11,"clone","","",27,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",27,null],[6,"Output","","",null,null],[11,"index","","",27,null],[6,"Output","","",null,null],[11,"index","","",27,null],[6,"Output","","",null,null],[11,"index","","",27,null],[6,"Output","","",null,null],[11,"index","","",27,null],[0,"salsa2012","sodiumoxide::crypto::stream","`crypto_stream_salsa2012` (Salsa20/12), a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.  This\ncipher is conjectured to meet the standard notion of unpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::salsa2012","`Key` for symmetric encryption",null,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[11,"drop","","",28,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",28,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",28,null],[6,"Output","","",null,null],[11,"index","","",28,null],[6,"Output","","",null,null],[11,"index","","",28,null],[6,"Output","","",null,null],[11,"index","","",28,null],[6,"Output","","",null,null],[11,"index","","",28,null],[11,"clone","","",29,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",29,null],[6,"Output","","",null,null],[11,"index","","",29,null],[6,"Output","","",null,null],[11,"index","","",29,null],[6,"Output","","",null,null],[11,"index","","",29,null],[6,"Output","","",null,null],[11,"index","","",29,null],[0,"salsa20","sodiumoxide::crypto::stream","`crypto_stream_salsa20` (Salsa20/20), a particular cipher specified in\n[Cryptography in NaCl](http://nacl.cr.yp.to/valid.html), Section 7.  This\ncipher is conjectured to meet the standard notion of unpredictability.",null,null],[3,"Key","sodiumoxide::crypto::stream::salsa20","`Key` for symmetric encryption",null,null],[3,"Nonce","","`Nonce` for symmetric encryption",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for symmetric encryption",null,{"inputs":[],"output":{"name":"key"}}],[5,"gen_nonce","","`gen_nonce()` randomly generates a nonce for symmetric encryption",null,{"inputs":[],"output":{"name":"nonce"}}],[5,"stream","","`stream()` produces a `len`-byte stream `c` as a function of a\nsecret key `k` and a nonce `n`.",null,{"inputs":[{"name":"usize"},{"name":"nonce"},{"name":"key"}],"output":{"name":"vec"}}],[5,"stream_xor","","`stream_xor()` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor()` function returns the ciphertext `c`.",null,null],[5,"stream_xor_inplace","","`stream_xor_inplace` encrypts a message `m` using a secret key `k` and a nonce `n`.\nThe `stream_xor_inplace()` function encrypts the message in place.",null,null],[17,"KEYBYTES","","",null,null],[17,"NONCEBYTES","","",null,null],[11,"drop","","",30,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",30,null],[6,"Output","","",null,null],[11,"index","","",30,null],[6,"Output","","",null,null],[11,"index","","",30,null],[6,"Output","","",null,null],[11,"index","","",30,null],[6,"Output","","",null,null],[11,"index","","",30,null],[11,"clone","","",31,{"inputs":[{"name":"nonce"}],"output":{"name":"nonce"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",31,null],[6,"Output","","",null,null],[11,"index","","",31,null],[6,"Output","","",null,null],[11,"index","","",31,null],[6,"Output","","",null,null],[11,"index","","",31,null],[6,"Output","","",null,null],[11,"index","","",31,null],[0,"shorthash","sodiumoxide::crypto","A lot of applications and programming language implementations have been\nrecently found to be vulnerable to denial-of-service attacks when a hash\nfunction with weak security guarantees, like Murmurhash 3, was used to\nconstruct a hash table.",null,null],[0,"siphash24","sodiumoxide::crypto::shorthash","`SipHash-2-4`",null,null],[3,"Digest","sodiumoxide::crypto::shorthash::siphash24","Digest-structure",null,null],[3,"Key","","Key",null,null],[5,"gen_key","","`gen_key()` randomly generates a key for shorthash",null,{"inputs":[],"output":{"name":"key"}}],[5,"shorthash","","`shorthash` hashes a message `m` under a key `k`. It\nreturns a hash `h`.",null,null],[17,"HASHBYTES","","",null,null],[17,"KEYBYTES","","",null,null],[11,"clone","","",32,{"inputs":[{"name":"digest"}],"output":{"name":"digest"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",32,null],[6,"Output","","",null,null],[11,"index","","",32,null],[6,"Output","","",null,null],[11,"index","","",32,null],[6,"Output","","",null,null],[11,"index","","",32,null],[6,"Output","","",null,null],[11,"index","","",32,null],[11,"drop","","",33,{"inputs":[{"name":"key"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"from_slice","","`from_slice()` creates an object from a byte slice",33,null],[6,"Output","","",null,null],[11,"index","","",33,null],[6,"Output","","",null,null],[11,"index","","",33,null],[6,"Output","","",null,null],[11,"index","","",33,null],[6,"Output","","",null,null],[11,"index","","",33,null],[0,"verify","sodiumoxide::crypto","Constant-time comparison of fixed-size vecs",null,null],[5,"verify_16","sodiumoxide::crypto::verify","`verify_16()` returns `true` if `x[0]`, `x[1]`, ..., `x[15]` are the\nsame as `y[0]`, `y[1]`, ..., `y[15]`. Otherwise it returns `false`.",null,null],[5,"verify_32","","`verify_32()` returns true if `x[0]`, `x[1]`, ..., `x[31]` are the\nsame as `y[0]`, `y[1]`, ..., `y[31]`. Otherwise it returns `false`.",null,null]],"paths":[[3,"PublicKey"],[3,"SecretKey"],[3,"Nonce"],[3,"PrecomputedKey"],[3,"Seed"],[3,"SecretKey"],[3,"PublicKey"],[3,"Signature"],[3,"SecretKey"],[3,"PublicKey"],[3,"Scalar"],[3,"GroupElement"],[3,"Key"],[3,"Tag"],[3,"Key"],[3,"Tag"],[3,"Digest"],[3,"Digest"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Tag"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Key"],[3,"Nonce"],[3,"Digest"],[3,"Key"]]};
searchIndex['byteorder'] = {"items":[[0,"","byteorder","This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.",null,null],[4,"Error","","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"eq","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_error","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from_error","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,null]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex['bswap'] = {"items":[[0,"","bswap","",null,null],[0,"u8","","Swap bytes for `u8` slices on all targets.",null,null],[5,"align_of_ptr","bswap::u8","TODO",null,null],[5,"reverse_slice_inplace","","TODO",null,null],[5,"reverse_slice","","TODO",null,null],[5,"reverse_memory_inplace","","TODO",null,null],[5,"reverse_memory","","TODO",null,null],[5,"reverse_memory_array_inplace","","",null,null],[5,"reverse_memory_array","","",null,null],[17,"BYTES","","",null,null],[0,"u16","bswap","Swap bytes for `u16` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u16","TODO",null,null],[5,"swap_memory","","TODO",null,null],[17,"BYTES","","",null,null],[0,"u24","bswap","Swap bytes for `[u8; 3]` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u24","",null,null],[5,"swap_memory","","",null,null],[17,"BYTES","","",null,null],[0,"u40","bswap","Swap bytes for `[u8; 5]` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u40","",null,null],[5,"swap_memory","","",null,null],[17,"BYTES","","",null,null],[0,"u48","bswap","Swap bytes for `[u8; 6]` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u48","",null,null],[5,"swap_memory","","",null,null],[17,"BYTES","","",null,null],[0,"u56","bswap","Swap bytes for `[u8; 7]` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u56","",null,null],[5,"swap_memory","","",null,null],[17,"BYTES","","",null,null],[0,"u32","bswap","Swap bytes for `u32` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u32","Swaps `len*4` bytes for `u32` objects inplace in `buf`.",null,null],[5,"swap_memory","","Swaps `len*4` bytes for `u32` objects from `src` to `dst`. The source and destination may not overlap.",null,null],[17,"BYTES","","",null,null],[0,"u64","bswap","Swap bytes for `u64` objects on all targets.",null,null],[5,"swap_memory_inplace","bswap::u64","Swaps `len*8` bytes for `u64` objects inplace in `buf`.",null,null],[5,"swap_memory","","Swaps `len*8` bytes for `u64` objects from `src` to `dst`. The source and destination may not overlap.",null,null],[17,"BYTES","","",null,null],[0,"beusize","bswap","",null,null],[5,"decode","bswap::beusize","",null,null],[5,"encode","","",null,null],[0,"leusize","bswap","",null,null],[5,"decode","bswap::leusize","",null,null],[5,"encode","","",null,null],[0,"beu16","bswap","Swap bytes for `u16` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu16","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"beu24","bswap","Swap bytes for `[u8; 3]` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu24","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"beu32","bswap","Swap bytes for `u32` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu32","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"beu40","bswap","Swap bytes for `[u8; 5]` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu40","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"beu48","bswap","Swap bytes for `[u8; 6]` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu48","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"beu56","bswap","Swap bytes for `[u8; 7]` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu56","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"beu64","bswap","Swap bytes for `u64` objects only on little-endian targets, does nothing on big-endian targets.",null,null],[5,"decode","bswap::beu64","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu16","bswap","Swap bytes for `u16` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu16","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu24","bswap","Swap bytes for `[u8; 3]` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu24","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu32","bswap","Swap bytes for `u32` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu32","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu40","bswap","Swap bytes for `[u8; 5]` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu40","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu48","bswap","Swap bytes for `[u8; 6]` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu48","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu56","bswap","Swap bytes for `[u8; 7]` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu56","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null],[0,"leu64","bswap","Swap bytes for `u64` objects only on big-endian targets, does nothing on little-endian targets.",null,null],[5,"decode","bswap::leu64","Decodes $E-endian bytes to a native-endian $T object.",null,null],[5,"decode_slice","","Decodes $E-endian bytes to a slice of native-endian $T objects.",null,null],[5,"encode","","Encodes a native-endian $T object to $E-endian bytes.",null,null],[5,"encode_slice","","Encodes a slice of native-endian $T objects to $E-endian bytes.",null,null]],"paths":[]};
searchIndex['libsodium-sys'] = {"items":[[0,"","libsodium-sys","",null,null],[3,"crypto_hash_sha256_state","","",null,null],[3,"crypto_hash_sha512_state","","",null,null],[5,"sodium_init","","",null,null],[5,"crypto_aead_chacha20poly1305_keybytes","","",null,null],[5,"crypto_aead_chacha20poly1305_nsecbytes","","",null,null],[5,"crypto_aead_chacha20poly1305_npubbytes","","",null,null],[5,"crypto_aead_chacha20poly1305_abytes","","",null,null],[5,"crypto_aead_chacha20poly1305_encrypt","","",null,null],[5,"crypto_aead_chacha20poly1305_decrypt","","",null,null],[5,"crypto_auth_bytes","","",null,null],[5,"crypto_auth_keybytes","","",null,null],[5,"crypto_auth_primitive","","",null,null],[5,"crypto_auth","","",null,null],[5,"crypto_auth_verify","","",null,null],[5,"crypto_auth_hmacsha256_bytes","","",null,null],[5,"crypto_auth_hmacsha256_keybytes","","",null,null],[5,"crypto_auth_hmacsha256","","",null,null],[5,"crypto_auth_hmacsha256_verify","","",null,null],[5,"crypto_auth_hmacsha512","","",null,null],[5,"crypto_auth_hmacsha512_verify","","",null,null],[5,"crypto_auth_hmacsha512_bytes","","",null,null],[5,"crypto_auth_hmacsha512_keybytes","","",null,null],[5,"crypto_auth_hmacsha512256_bytes","","",null,null],[5,"crypto_auth_hmacsha512256_keybytes","","",null,null],[5,"crypto_auth_hmacsha512256","","",null,null],[5,"crypto_auth_hmacsha512256_verify","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_keypair","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_open","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_beforenm","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_afternm","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_open_afternm","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_seedbytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_publickeybytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_secretkeybytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_beforenmbytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_noncebytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_zerobytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_boxzerobytes","","",null,null],[5,"crypto_box_curve25519xsalsa20poly1305_macbytes","","",null,null],[5,"crypto_hash_bytes","","",null,null],[5,"crypto_hash","","",null,null],[5,"crypto_hash_primitive","","",null,null],[5,"crypto_hash_sha256_bytes","","",null,null],[5,"crypto_hash_sha256","","",null,null],[5,"crypto_hash_sha256_init","","",null,null],[5,"crypto_hash_sha256_update","","",null,null],[5,"crypto_hash_sha256_final","","",null,null],[5,"crypto_hash_sha512_bytes","","",null,null],[5,"crypto_hash_sha512","","",null,null],[5,"crypto_hash_sha512_init","","",null,null],[5,"crypto_hash_sha512_update","","",null,null],[5,"crypto_hash_sha512_final","","",null,null],[5,"crypto_onetimeauth_bytes","","",null,null],[5,"crypto_onetimeauth_keybytes","","",null,null],[5,"crypto_onetimeauth_primitive","","",null,null],[5,"crypto_onetimeauth_poly1305","","",null,null],[5,"crypto_onetimeauth_poly1305_verify","","",null,null],[5,"crypto_onetimeauth_poly1305_bytes","","",null,null],[5,"crypto_onetimeauth_poly1305_keybytes","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_saltbytes","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_strbytes","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_strprefix","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_opslimit_interactive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_memlimit_interactive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_str","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_str_verify","","",null,null],[5,"crypto_pwhash_scryptsalsa208sha256_ll","","",null,null],[5,"crypto_scalarmult_curve25519","","",null,null],[5,"crypto_scalarmult_curve25519_base","","",null,null],[5,"crypto_scalarmult_curve25519_bytes","","",null,null],[5,"crypto_scalarmult_curve25519_scalarbytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_open","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_keybytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_noncebytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_zerobytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_boxzerobytes","","",null,null],[5,"crypto_secretbox_xsalsa20poly1305_macbytes","","",null,null],[5,"crypto_shorthash_siphash24","","",null,null],[5,"crypto_shorthash_siphash24_bytes","","",null,null],[5,"crypto_shorthash_siphash24_keybytes","","",null,null],[5,"crypto_sign_ed25519_keypair","","",null,null],[5,"crypto_sign_ed25519_seed_keypair","","",null,null],[5,"crypto_sign_ed25519","","",null,null],[5,"crypto_sign_ed25519_open","","",null,null],[5,"crypto_sign_ed25519_detached","","",null,null],[5,"crypto_sign_ed25519_verify_detached","","",null,null],[5,"crypto_sign_ed25519_bytes","","",null,null],[5,"crypto_sign_ed25519_seedbytes","","",null,null],[5,"crypto_sign_ed25519_publickeybytes","","",null,null],[5,"crypto_sign_ed25519_secretkeybytes","","",null,null],[5,"crypto_sign_edwards25519sha512batch_keypair","","",null,null],[5,"crypto_sign_edwards25519sha512batch","","",null,null],[5,"crypto_sign_edwards25519sha512batch_open","","",null,null],[5,"crypto_sign_edwards25519sha512batch_bytes","","",null,null],[5,"crypto_sign_edwards25519sha512batch_publickeybytes","","",null,null],[5,"crypto_sign_edwards25519sha512batch_secretkeybytes","","",null,null],[5,"crypto_stream_keybytes","","",null,null],[5,"crypto_stream_noncebytes","","",null,null],[5,"crypto_stream_primitive","","",null,null],[5,"crypto_stream_aes128ctr","","",null,null],[5,"crypto_stream_aes128ctr_xor","","",null,null],[5,"crypto_stream_aes128ctr_keybytes","","",null,null],[5,"crypto_stream_aes128ctr_noncebytes","","",null,null],[5,"crypto_stream_aes128ctr_beforenmbytes","","",null,null],[5,"crypto_stream_chacha20_keybytes","","",null,null],[5,"crypto_stream_chacha20_noncebytes","","",null,null],[5,"crypto_stream_salsa20","","",null,null],[5,"crypto_stream_salsa20_xor","","",null,null],[5,"crypto_stream_salsa20_keybytes","","",null,null],[5,"crypto_stream_salsa20_noncebytes","","",null,null],[5,"crypto_stream_salsa2012","","",null,null],[5,"crypto_stream_salsa2012_xor","","",null,null],[5,"crypto_stream_salsa2012_keybytes","","",null,null],[5,"crypto_stream_salsa2012_noncebytes","","",null,null],[5,"crypto_stream_salsa208","","",null,null],[5,"crypto_stream_salsa208_xor","","",null,null],[5,"crypto_stream_salsa208_keybytes","","",null,null],[5,"crypto_stream_salsa208_noncebytes","","",null,null],[5,"crypto_stream_xsalsa20","","",null,null],[5,"crypto_stream_xsalsa20_xor","","",null,null],[5,"crypto_stream_xsalsa20_keybytes","","",null,null],[5,"crypto_stream_xsalsa20_noncebytes","","",null,null],[5,"crypto_verify_16","","",null,null],[5,"crypto_verify_32","","",null,null],[5,"randombytes_buf","","",null,null],[17,"crypto_aead_chacha20poly1305_KEYBYTES","","",null,null],[17,"crypto_aead_chacha20poly1305_NSECBYTES","","",null,null],[17,"crypto_aead_chacha20poly1305_NPUBBYTES","","",null,null],[17,"crypto_aead_chacha20poly1305_ABYTES","","",null,null],[17,"crypto_auth_BYTES","","",null,null],[17,"crypto_auth_KEYBYTES","","",null,null],[17,"crypto_auth_PRIMITIVE","","",null,null],[17,"crypto_auth_hmacsha256_BYTES","","",null,null],[17,"crypto_auth_hmacsha256_KEYBYTES","","",null,null],[17,"crypto_auth_hmacsha512_BYTES","","",null,null],[17,"crypto_auth_hmacsha512_KEYBYTES","","",null,null],[17,"crypto_auth_hmacsha512256_BYTES","","",null,null],[17,"crypto_auth_hmacsha512256_KEYBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_SEEDBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_NONCEBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_ZEROBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES","","",null,null],[17,"crypto_box_curve25519xsalsa20poly1305_MACBYTES","","",null,null],[17,"crypto_hash_BYTES","","",null,null],[17,"crypto_hash_PRIMITIVE","","",null,null],[17,"crypto_hash_sha256_BYTES","","",null,null],[17,"crypto_hash_sha512_BYTES","","",null,null],[17,"crypto_onetimeauth_BYTES","","",null,null],[17,"crypto_onetimeauth_KEYBYTES","","",null,null],[17,"crypto_onetimeauth_PRIMITIVE","","",null,null],[17,"crypto_onetimeauth_poly1305_BYTES","","",null,null],[17,"crypto_onetimeauth_poly1305_KEYBYTES","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_SALTBYTES","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_STRBYTES","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_STRPREFIX","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE","","",null,null],[17,"crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE","","",null,null],[17,"crypto_scalarmult_curve25519_BYTES","","",null,null],[17,"crypto_scalarmult_curve25519_SCALARBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_KEYBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_NONCEBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_ZEROBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES","","",null,null],[17,"crypto_secretbox_xsalsa20poly1305_MACBYTES","","",null,null],[17,"crypto_shorthash_siphash24_BYTES","","",null,null],[17,"crypto_shorthash_siphash24_KEYBYTES","","",null,null],[17,"crypto_sign_ed25519_BYTES","","",null,null],[17,"crypto_sign_ed25519_SEEDBYTES","","",null,null],[17,"crypto_sign_ed25519_PUBLICKEYBYTES","","",null,null],[17,"crypto_sign_ed25519_SECRETKEYBYTES","","",null,null],[17,"crypto_sign_edwards25519sha512batch_BYTES","","",null,null],[17,"crypto_sign_edwards25519sha512batch_PUBLICKEYBYTES","","",null,null],[17,"crypto_sign_edwards25519sha512batch_SECRETKEYBYTES","","",null,null],[17,"crypto_stream_KEYBYTES","","",null,null],[17,"crypto_stream_NONCEBYTES","","",null,null],[17,"crypto_stream_PRIMITIVE","","",null,null],[17,"crypto_stream_aes128ctr_KEYBYTES","","",null,null],[17,"crypto_stream_aes128ctr_NONCEBYTES","","",null,null],[17,"crypto_stream_aes128ctr_BEFORENMBYTES","","",null,null],[17,"crypto_stream_chacha20_KEYBYTES","","",null,null],[17,"crypto_stream_chacha20_NONCEBYTES","","",null,null],[17,"crypto_stream_salsa20_KEYBYTES","","",null,null],[17,"crypto_stream_salsa20_NONCEBYTES","","",null,null],[17,"crypto_stream_salsa2012_KEYBYTES","","",null,null],[17,"crypto_stream_salsa2012_NONCEBYTES","","",null,null],[17,"crypto_stream_salsa208_KEYBYTES","","",null,null],[17,"crypto_stream_salsa208_NONCEBYTES","","",null,null],[17,"crypto_stream_xsalsa20_KEYBYTES","","",null,null],[17,"crypto_stream_xsalsa20_NONCEBYTES","","",null,null]],"paths":[]};
initSearch(searchIndex);
